version: "3.9"

services:
  # ---------------------------
  # Databases
  # ---------------------------
  postgres-los:
    image: postgres:16
    container_name: postgres-los
    command: ["postgres","-c","wal_level=logical","-c","max_replication_slots=10","-c","max_wal_senders=10"]
    environment:
      POSTGRES_USER: los
      POSTGRES_PASSWORD: los
      POSTGRES_DB: los
    ports:
      - "5434:5432"
    volumes:
      - pgdata-los:/var/lib/postgresql/data
      - ./db/los-init:/docker-entrypoint-initdb.d:ro
    networks: [saga-net]
    restart: unless-stopped

  postgres-ledger:
    image: postgres:16
    container_name: postgres-ledger
    command: ["postgres","-c","wal_level=logical","-c","max_replication_slots=10","-c","max_wal_senders=10"]
    environment:
      POSTGRES_USER: ledger
      POSTGRES_PASSWORD: ledger
      POSTGRES_DB: ledger
    ports:
      - "6544:5432"
    volumes:
      - pgdata-ledger:/var/lib/postgresql/data
      - ./db/ledger-init:/docker-entrypoint-initdb.d:ro
    networks: [saga-net]
    restart: unless-stopped

  # ---------------------------
  # Kafka stack
  # ---------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks: [saga-net]
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"   # external access
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks: [ saga-net ]
    restart: unless-stopped

  connect:
    image: debezium/connect:2.7.0.Final
    container_name: connect
    depends_on:
      kafka:
        condition: service_started
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: debezium
      CONFIG_STORAGE_TOPIC: connect-configs
      OFFSET_STORAGE_TOPIC: connect-offsets
      STATUS_STORAGE_TOPIC: connect-status
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      REST_ADVERTISED_HOST_NAME: connect
      PLUGIN_PATH: /kafka/connect
      # Additional configurations for single-node setup
      INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      INTERNAL_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      INTERNAL_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      # quiesce noisy logs
      KAFKA_LOG4J_LOGGERS: "org.reflections=ERROR"
    ports:
      - "8083:8083"
    networks: [saga-net]
    restart: unless-stopped
    # Added healthcheck to ensure Kafka is ready
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/connectors"]
      interval: 30s
      timeout: 10s
      retries: 5

  # auto-register Debezium connectors for LOS and Ledger
  register-connectors:
    image: curlimages/curl:8.7.1
    container_name: register-connectors
    depends_on:
      connect:
        condition: service_healthy  # Wait for connect to be healthy
    volumes:
      - ./connectors:/connectors:ro
    entrypoint: >
      sh -c "
      echo 'Waiting for Kafka Connect...';
      until curl -s http://connect:8083/connectors > /dev/null; do sleep 3; done;
      echo 'Registering los-outbox connector';
      curl -s -X POST -H 'Content-Type: application/json' --data @/connectors/los-outbox.json http://connect:8083/connectors || true;
      echo 'Registering ledger-outbox connector';
      curl -s -X POST -H 'Content-Type: application/json' --data @/connectors/ledger-outbox.json http://connect:8083/connectors || true;
      echo 'Done.';
      "
    networks: [saga-net]
    restart: "no"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092  # Fixed: use internal port
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8099:8080"
    networks: [saga-net]
    restart: unless-stopped

  # ---------------------------
  # Spring Boot apps
  # ---------------------------
  ledger-service:
    build:
      context: ./ledger-service
    container_name: ledger-service
    depends_on:
      - postgres-ledger
      - kafka
    environment:
      SERVER_PORT: 8090
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-ledger:5432/ledger
      SPRING_DATASOURCE_USERNAME: ledger
      SPRING_DATASOURCE_PASSWORD: ledger
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8090:8090"
    networks: [saga-net]
    restart: unless-stopped

  los-service:
    build:
      context: ./los-service
    container_name: los-service
    depends_on:
      - postgres-los
      - kafka
      - ledger-service
    environment:
      SERVER_PORT: 8081
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-los:5432/los
      SPRING_DATASOURCE_USERNAME: los
      SPRING_DATASOURCE_PASSWORD: los
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092  
      LEDGER_BASE_URL: http://ledger-service:8090
    ports:
      - "8081:8081"
    networks: [saga-net]
    restart: unless-stopped

networks:
  saga-net:

volumes:
  pgdata-los:
  pgdata-ledger: